# vim: ft=python
from pathlib import Path
# XONSH WIZARD START
xontrib load coreutils jedi vox
# XONSH WIZARD END

$XONSH_SHOW_TRACEBACK = True
$VI_MODE = True
$XONSH_COLOR_STYLE = 'paraiso-dark'
$PROMPT = '{env_name:{}|}{BLUE}{short_cwd}{branch_color}{curr_branch:|{}}{RESET}>{RESET} '
$XONSH_HISTORY_BACKEND = 'sqlite'


def load_aliases():
    import os
    from pathlib import Path
    import sys
    import re
    import tempfile
    import dirlog
    from hashlib import md5
    from xonsh.tools import unthreadable, uncapturable

    # make futzy aliases

    @unthreadable
    def _c(args):
        if not args:
            os.chdir(dirlog.get_and_update(''))
            ls --color=auto
            return

        try:
            os.chdir(dirlog.get_and_update(*args))
            ls --color=auto
        except TypeError:
            print('bad args:', args)

    aliases['c'] = _c

    def permedit(args):
        editor = $EDITOR or 'nano'
        test = path = Path(args[-1])
        args.insert(0, editor)
        while not test.exists():
            test = test.parent
        if not os.access(test, os.W_OK):
            resp = input('sudo [Y/n]? ')
            if not resp or resp.strip().lower().startswith('y'):
                args.insert(0, 'sudo')
        @(args)

    def _ern(args):
        for filename in args:
            with tempfile.NamedTemporaryFile('w+') as tf:
                tf.write(filename)
                tf.flush()
                $EDITOR @(tf.name)
                tf.seek(0)
                buff = tf.readline().strip()
            if filename != buff:
                mv @(filename) @(buff)

    def _ns(args):
        $ed = $(newscript -m @(args)).strip()
        "$ed" @(args[0])

    # import shell aliases
    al_cache = p'$HOME/.cache/ali_cache.xsh'
    al_path = p'$HOME/.aliases'
    al_hash = p'$HOME/.cache/ali_hash'
    with al_path.open('rb') as alias_file:
        shell_aliases = alias_file.read()
    new_hash = md5(shell_aliases).digest()

    try:
        with al_hash.open('rb') as alias_hash_file:
            old_hash = alias_hash_file.read()
    except FileNotFoundError:
        old_hash = None

    ctlchars = set('&|;><')
    if old_hash != new_hash:
        import shlex
        ali = (shlex.split(i)[1] for i in shell_aliases.decode().splitlines()
               if i.startswith('alias '))
        ali = (cmd.split("=", maxsplit=1) for cmd in ali)
        ali = ((al, cmd if ctlchars.intersection(cmd) else shlex.split(cmd))
               for al, cmd in ali)
        ali = '\n'.join("aliases['" + al + "'] = " + repr(cmd)
                        for al, cmd in ali)
        with al_hash.open('wb') as ah, al_cache.open('w') as ac:
            ah.write(new_hash)
            ac.write(ali)

        exec(ali)

    else:
        source @(al_cache)

    aliases['e'] = permedit
    aliases['ern'] = _ern
    aliases['ns'] = _ns
    aliases['echo'] = lambda args: print(*args)


load_aliases()
