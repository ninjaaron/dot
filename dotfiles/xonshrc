# vim: ft=python
import typing
from pathlib import Path
$VI_MODE = True
$XONSH_COLOR_STYLE = 'paraiso-dark'
$PROMPT = '{env_name:{}|}{BLUE}{short_cwd}{branch_color}{curr_branch:|{}}{NO_COLOR}>{NO_COLOR} '
# $XONSH_SHOW_TRACEBACK = True

xontrib load vox


def load_aliases():
    import os
    from pathlib import Path
    import sys
    import re
    import tempfile
    import dirlog
    from hashlib import md5
    from xonsh.tools import unthreadable, uncapturable

    # make futzy aliases

    @unthreadable
    def _c(args):
        if not args:
            os.chdir(dirlog.get_and_update(''))
            ls --color=auto
            return

        try:
            os.chdir(dirlog.get_and_update(*args))
            ls --color=auto
        except TypeError:
            print('bad args:', args)

    aliases['c'] = _c

    def permedit(args):
        editor = $EDITOR or 'nano'
        test = path = Path(args[-1])
        args.insert(0, editor)
        while not test.exists():
            test = test.parent
        if not os.access(test, os.W_OK):
            resp = input('sudo [Y/n]? ')
            if not resp or resp.strip().lower().startswith('y'):
                args.insert(0, 'sudo')
        @(args)

    def _ern(args):
        for filename in args:
            with tempfile.NamedTemporaryFile('w+') as tf:
                tf.write(filename)
                tf.flush()
                $EDITOR @(tf.name)
                tf.seek(0)
                buff = tf.readline().strip()
            if filename != buff:
                mv @(filename) @(buff)

    def _ns(args):
        $ed = $(newscript -m @(args)).strip()
        $ed @(args[0])

    # import shell aliases
    al_cache = p'$HOME/.cache/ali_cache.xsh'
    al_path = p'$HOME/.aliases'
    al_hash = p'$HOME/.cache/ali_hash'
    with al_path.open('rb') as af, al_hash.open('rb') as ah:
        old_hash = ah.read()
        shell_aliases = af.read()
        new_hash = md5(shell_aliases).digest()

    if old_hash != new_hash:
        ali = '\n'.join(i for i in shell_aliases.decode().splitlines()
                        if i.startswith('alias '))
        ali = re.sub(r'^alias ([\w-]*)=(.*?)$', r"aliases['\1'] = \2",
                     ali, flags=re.M)
        with al_hash.open('wb') as ah, al_cache.open('w') as ac:
            ah.write(new_hash)
            ac.write(ali)

        exec(ali)

    else:
        source @(al_cache)

    aliases['e'] = permedit
    aliases['ern'] = _ern
    aliases['ns'] = _ns
    aliases['echo'] = lambda args: print(*args)


load_aliases()


_exp_path = Path('/home/ninjaaron/brace_expansion.py')
if _exp_path.exists():
    _exp_env = {}
    _exp_code = compile(open(_exp_path).read(), _exp_path, 'exec')
    exec(_exp_code, _exp_env)
    exp = _exp_env['brace_expand']
