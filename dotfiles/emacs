;; Added by Package.el.  This must come before configurations of

(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#1b1b1b" "#cc4444" "#55aa55" "#ee9966" "#4477ff" "#bb33bb" "#22aaaa" "#808080"])
 '(custom-enabled-themes '(shomshing))
 '(custom-safe-themes
   '("1b2c1adbfea189cbc7e5084b3c8bd9cbb6c26cc778ea6f7e3a2f3c8189bc738b" "24fc794a16809a86a63ec2e6f8801e99141aca73fc238ea30d35f87c88847329" "abffe1169d8f63953e6c9ed9c77db7cbc6fc9ac0c010d83b183c32c9825beff5"))
 '(elpy-modules
   '(elpy-module-company elpy-module-eldoc elpy-module-flymake elpy-module-pyvenv elpy-module-yasnippet elpy-module-django elpy-module-sane-defaults))
 '(elpy-rpc-virtualenv-path 'current)
 '(inhibit-startup-screen t)
 '(ispell-dictionary nil)
 '(menu-bar-mode nil)
 '(minimap-hide-fringes t)
 '(minimap-highlight-line nil)
 '(package-selected-packages
<<<<<<< HEAD
   '(eglot flymake ## cider clojure-mode inf-clojure geiser geiser-chez scheme-complete elpy flycheck-rust gnu-elpa-keyring-update tide typescript-mode tuareg slime ht f dash-functional quelpa flycheck-haskell ghc markdown-preview-mode 4clojure @ a aa-edit-mode fish-mode haskell-mode racket-mode flycheck-julia flycheck-nimsuggest flycheck-nim nim-mode cython-mode flycheck-cython julia-mode toml-mode rust-mode 0blayout markdown-mode rainbow-mode js2-mode markdown-mode+ markdown-preview-eww web-mode evil-leader use-package minimap yaml-mode company evil))
=======
   '(bison-mode geiser geiser-chez scheme-complete elpy lsp-julia swift-mode flycheck-rust reason-mode company-lsp lsp-ui gnu-elpa-keyring-update tide typescript-mode tuareg slime lsp-mode ht f dash-functional quelpa flycheck-haskell ghc markdown-preview-mode 4clojure @ a aa-edit-mode fish-mode haskell-mode racket-mode flycheck-julia flycheck-nimsuggest flycheck-nim nim-mode cython-mode flycheck-cython julia-mode toml-mode rust-mode 0blayout markdown-mode rainbow-mode js2-mode markdown-mode+ markdown-preview-eww web-mode evil-leader use-package minimap yaml-mode company evil))
>>>>>>> master
 '(safe-local-variable-values '((engine . jinja2)))
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(minimap-active-region-background ((t (:background "#1b1b1b"))))
 '(minimap-font-face ((t (:height 30 :family "Ubuntu Mono"))))
 '(minimap-semantic-function-face ((t (:inherit (font-lock-function-name-face Ubuntu\ Mono) :background "#202414" :box (:line-width 1 :color "white") :height 2.75)))))
(add-to-list 'default-frame-alist '(font . "bitocrafull-9:width=condensed"))
;; (load "/home/ninjaaron/.opam/4.08.1/share/emacs/site-lisp/tuareg-site-file")

;; added melpa
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives 
             '("melpa" . "http://melpa.org/packages/"))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(use-package evil
  :ensure t)
(use-package minimap
  :ensure t)
(use-package elpy
  :ensure t)
(use-package evil-leader
  :ensure t)
(use-package web-mode 
  :ensure t)
(use-package js2-mode
  :ensure t)


(setq inferior-lisp-program "/usr/bin/sbcl")
(setq slime-contribs '(slime-fancy))

;; company
(add-hook 'after-init-hook 'global-company-mode)

;; org
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cb" 'org-iswitchb)
(setq org-log-done t)

;; evil mode
(require 'evil)
(evil-mode 1)
(define-key evil-normal-state-map "#" 'comment-line)
(define-key evil-visual-state-map "#" 'comment-region)



;; evil-leader
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
 "<SPC>" 'execute-extended-command
 "w" 'evil-write
 "q" 'evil-quit
 "x" 'evil-save-and-close
 "a" 'auto-fill-mode
 "tw" 'set-fill-column
 "m" 'minimap-mode
 "n" 'make-frame
 "N" 'linum-mode
 "c" 'count-words
 "b" 'switch-to-buffer
 "f" 'find-file-other-frame
 "r" 'fill-paragraph
 "1" 'delete-other-windows
 "p" 'pyvenv-workon
 "u" 'ubuntu12
 "sp" 'flyspell-mode
 )
(setq x-select-enable-clipboard-manager nil)

(defun change-font (font-name)
  "I can never rememver how to change the font..."
  (interactive "sfontname: ")
  (set-frame-font font-name))


(defun ubuntu-font (size)
  "change to Ubuntu font"
  (interactive "ssize: ")
  (set-frame-font (format "Ubuntu Mono %s" size)))

(defun ubuntu12 ()
  "set font to Ubuntu Mono 12"
  (interactive)
  (set-frame-font "Ubuntu Mono 12"))

(defun bitocra-font ()
  "change to bitocra font"
  (interactive)
  (set-frame-font "bitocrafull:width=condensed"))

;; tide
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

;; elpy
(elpy-enable)
(autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
(autoload 'run-scheme "cmuscheme" "Switch to interactive Scheme buffer." t)
(setq auto-mode-alist (cons '("\\.ss" . scheme-mode) auto-mode-alist))

;; web-mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-enable-engine-detection t)
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")

;; misc
(add-to-list 'interpreter-mode-alist '("eggshell" . python-mode))
(add-hook 'python-mode-hook (lambda () (set-fill-column 79)))
(add-hook 'python-mode-hook (lambda () (auto-fill-mode t)))
(global-linum-mode t)
(column-number-mode t)
(tool-bar-mode -1)
(menu-bar-mode -1) ;; open menu with F10... for now. mwahahahaha
(scroll-bar-mode -1)
(setq-default line-spacing 3)
(setq-default bidi-display-reordering nil)
(setq backup-directory-alist
          `((".*" . "~/.emacsbackups")))
(setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
(set-default 'truncate-lines t)
(global-set-key (kbd "<f12>" ) 'minimap-mode)
(global-set-key (kbd "<f8>") 'make-frame-command)
(setq-default indent-tabs-mode nil)
(setq js-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq sh-indentation 2)
(setq js-indent-level 4
      js2-basic-offset 4)

(add-hook 'c-mode-hook
          '(lambda()
             (setq indent-tabs-mode t)
             (setq c-default-style "linux")
             (setq c-basic-offset 8)
             (setq tab-width 8)
             (setq c-indent-tabs-mode t)
             (setq c-comment)
	     )
	  )

(add-to-list 'load-path "~/.emacs.d/cc-mode")
(add-hook 'rust-mode-hook 'eglot-ensure)
;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
;; ## end of OPAM user-setup addition for emacs / base ## keep this line
(require 'ocamlformat)
(add-hook
 'tuareg-mode
 (lambda ()
   (define-key tuareg-mode-map (kbd "C-M-<tab>") #'ocamlformat)
   (add-hook 'before-save-hook #'ocamlformat-before-save)))
                           
(require 'lsp-julia)
(add-hook 'julia-mode-hook #'lsp-mode)
