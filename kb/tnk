partial default alphanumeric_keys
xkb_symbols "tnk" {

  // so, this layout is supposed to be more or less the same as the standard
  // Israeli layout, except with all capitol latin letters being rebound to
  // Hebrew vowels and accents so as to be useful for typing modern and Biblical
  // Hebrew for those used to a standard israeli layout.

  name[Group1] = "Hebrew (Biblical+Modern)";
  key.type = "FOUR_LEVEL_SEMIALPHABETIC";
  include "level3(alt_switch)"

  key <TLDE> { [ semicolon,    asciitilde, U05B0        ] }; // sheva
  key <AE01> { [ 1,            exclam,     U05B1        ] }; // h. segol
  key <AE02> { [ 2,            at,         U05B2        ] }; // h. patah
  key <AE03> { [ 3,            numbersign, U05B3        ] }; // h. qamats
  key <AE04> { [ 4,            dollar,     U05B4        ] }; // hiriq
  key <AE05> { [ 5,            percent,    U05B5        ] }; // tsere
  key <AE06> { [ 6,           asciicircum, U0591        ] }; // atnah
  key <AE07> { [ 7,            ampersand,  U05B7        ] }; // patah
  key <AE08> { [ 8,            asterisk,   U05B8        ] }; // qamats
  key <AE09> { [ 9,            parenright, U05C2        ] }; // sin dot
  key <AE10> { [ 0,            parenleft,  U05C1        ] }; // shin dot
  key <AE11> { [ minus,        underscore, U05B9, U05BE ] }; // holam, maqaf
  key <AE12> { [ equal,        plus,       U05BC        ] }; // dagesh

  key <AD01> { [ slash                                  ] };
  key <AD02> { [ apostrophe,      UFB2A,   UFB2B        ] }; // shin+dot, sin+dot
  key <AD03> { [ hebrew_qoph,     U05B6,   U05B5, U05B1 ] }; // segol, tsere, hataf segol
  key <AD04> { [ hebrew_resh,     U05BF,   U0597        ] };
  key <AD05> { [ hebrew_aleph,    U200F,   U0591, U05A2 ] }; // strong RTL closer
  key <AD06> { [ hebrew_tet,      Y,       U0596        ] };
  key <AD07> { [ hebrew_waw,      U05BB,   UFB35        ] }; // qibbuts, shureq
  key <AD08> { [ hebrew_finalnun, U05B4                 ] }; // hiriq
  key <AD09> { [ hebrew_finalmem, U05B8,   U05B9, U05B3 ] }; // qamats, holam, h. qamats
  key <AD10> { [ hebrew_pe,       P,       U0599        ] };
  key <AD11> { [ bracketright, braceright               ] };
  key <AD12> { [ bracketleft,   braceleft, U05BD        ] };
  key <BKSL> { [ backslash,       bar,     U05BB        ] }; // qibbuts

  key <AC01> { [ hebrew_shin,     U05B7,   U0593, U05B2 ] }; // patah, qamats, h. patah
  key <AC02> { [ hebrew_dalet,    U05B0,   U05A7, U05AD ] }; // sheva, darga, dehi
  key <AC03> { [ hebrew_gimel,    U05BC,   U059C, U059D ] };
  key <AC04> { [ hebrew_kaph,     F,       U059E        ] };
  key <AC05> { [ hebrew_ayin,     U05F3,   U05AB, U05AC ] };
  key <AC06> { [ hebrew_yod,      U05F4,   U059A, U05AA ] };
  key <AC07> { [ hebrew_chet,     U202B                 ] }; // RTL block begin
  key <AC08> { [ hebrew_lamed,    U202C                 ] }; // RTL block end
  key <AC09> { [ hebrew_finalkaph, L                    ] };
  key <AC10> { [ hebrew_finalpe,  colon,  U0594         ] }; // zaqef qatan
  key <AC11> { [ comma,          quotedbl               ] };

  key <AB01> { [ hebrew_zain,     U0593,   U0594, U0595 ] }; // Shalshelet
  key <AB02> { [ hebrew_samech,   UFB2B,   U0592        ] }; // sin+dot, segolta
  key <AB03> { [ hebrew_bet,      U05B5,   U05AE        ] };
  key <AB04> { [ hebrew_he,       UFB4B,   U05A4        ] };
  key <AB05> { [ hebrew_nun,      B                     ] };
  key <AB06> { [ hebrew_mem,      N                     ] };
  key <AB07> { [ hebrew_zade,     U05A3,   U05A5, U05A6 ] };
  key <AB08> { [ hebrew_taw,      greater, U059B, U0598 ] };
  key <AB09> { [ hebrew_finalzade, less,   U05A0, U05A9 ] };
  key <AB10> { [ period,         question, U05C3        ] };

  key <SPCE> { [ space, space, thinspace, nobreakspace  ] };
};

xkb_symbols "grk" {
  include "tnk(tnk)"
  name[Group1] = "Hebrew and Greek";

    key.type[Group1]="EIGHT_LEVEL";
    key <AD01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             semicolon,          colon ] }; // ; :
    key <AD02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Greek_finalsmallsigma,    Greek_SIGMA ] }; // ς Σ
    key <AD03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,         Greek_epsilon,  Greek_EPSILON ] }; // ε Ε
    key <AD04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_rho,      Greek_RHO ] }; // ρ Ρ
    key <AD05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_tau,      Greek_TAU ] }; // τ Τ
    key <AD06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,         Greek_upsilon,  Greek_UPSILON ] }; // υ Υ
    key <AD07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_theta,    Greek_THETA ] }; // θ Θ
    key <AD08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            Greek_iota,     Greek_IOTA ] }; // ι Ι
    key <AD09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,         Greek_omicron,  Greek_OMICRON ] }; // ο Ο
    key <AD10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,              Greek_pi,       Greek_PI ] }; // π Π
    key <AD11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, dead_tilde, dead_diaeresis, dead_macron ] }; // [ {
    key <AD12> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,  dead_iota,     VoidSymbol,  dead_breve ] }; // ] }

    key <AC01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_alpha,    Greek_ALPHA ] }; // α Α
    key <AC02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_sigma,    Greek_SIGMA ] }; // σ Σ
    key <AC03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_delta,    Greek_DELTA ] }; // δ Δ
    key <AC04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_phi,      Greek_PHI ] }; // φ Φ
    key <AC05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_gamma,    Greek_GAMMA ] }; // γ Γ
    key <AC06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_eta,      Greek_ETA ] }; // η Η
    key <AC07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,              Greek_xi,       Greek_XI ] }; // ξ Ξ
    key <AC08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_kappa,    Greek_KAPPA ] }; // κ Κ
    key <AC09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_lamda,    Greek_LAMDA ] }; // λ Λ
    key <AC10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            dead_acute,     dead_psili ] }; // ´ ¨
    key <AC11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, dead_grave, dead_dasia, apostrophe, quotedbl ] }; // ' "

    key <AB01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_zeta,     Greek_ZETA ] }; // ζ Ζ
    key <AB02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            Greek_chi,      Greek_CHI ] }; // χ Χ
    key <AB03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            Greek_psi,      Greek_PSI ] }; // ψ Ψ
    key <AB04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,          Greek_omega,    Greek_OMEGA ] }; // ω Ω
    key <AB05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,           Greek_beta,     Greek_BETA ] }; // β Β
    key <AB06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_nu,       Greek_NU ] }; // ν Ν
    key <AB07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,             Greek_mu,       Greek_MU ] }; // μ Μ
    key <AB08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,        comma,        less ] }; // , <
    key <AB09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,       period,     greater ] }; // . >
    key <AB10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,        slash,    question ] }; // / ?

    key <TLDE> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,        grave,  asciitilde ] }; // ` ~
    key <AE01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            1,      exclam ] }; // 1 !
    key <AE02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            2,          at ] }; // 2 @
    key <AE03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            3,  numbersign ] }; // 3 #
    key <AE04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            4,      dollar ] }; // 4 $
    key <AE05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            5,     percent ] }; // 5 %
    key <AE06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            6, asciicircum ] }; // 6 ^
    key <AE07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            7,   ampersand ] }; // 7 &
    key <AE08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            8,    asterisk ] }; // 8 *
    key <AE09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            9,   parenleft ] }; // 9 (
    key <AE10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,            0,  parenright ] }; // 0 )
    key <AE11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,        minus,  underscore ] }; // - _
    key <AE12> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,        equal,        plus ] }; // = +

    key <BKSL> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol,    backslash,         bar ] }; // \ |

    key <RALT> { [ NoSymbol, NoSymbol, ISO_Level5_Lock, NoSymbol, ISO_Level3_Latch, ISO_Level3_Latch, ISO_Level5_Lock ] };
    key.type[Group1]="TWO_LEVEL";
    key <BKSP> { [ BackSpace, ISO_Level5_Lock ] };

    include "level5(modifier_mapping)"
    include "level3(modifier_mapping)"
};
