#!/usr/bin/env python3
import sys
import argparse
import subprocess as sp
import json
import shlex
from pathlib import Path

def server_dump(pattern, maxsize=None):
    if maxsize is not None:
       maxsize *= 1024**2
    dir = Path()
    print(json.dumps(
        [str(p) for p in dir.glob(pattern)
         if maxsize is None or p.stat().st_size < maxsize]))

def get_matches(server, pattern, maxsize=None):
    command = Path(sys.argv[0]).name
    p = sp.run(['ssh', server, command, '--server-dump', "'%s'" % pattern]
                   + ([str(maxsize)] if maxsize is not None else []),
               stdout=sp.PIPE).stdout.decode()
    return list(map(shlex.quote, json.loads(p)))


def main():
    ap = argparse.ArgumentParser()
    add = ap.add_argument
    add('pattern', help='glob to match on the server')
    add('maxsize', nargs='?', type=float, help='maximum filesize in MB')
    add('--server-dump', action='store_true',
        help='the server-side process to print matches')
    add('-t', '--test', action='store_true', help='print matches and exit')
    add('-s', '--server', default='sink')
    add('-r', '--remove', action='store_true', help='remove files from server')
    a = ap.parse_args()
    if a.server_dump:
        server_dump(a.pattern, a.maxsize)
        return
    matches = get_matches(a.server, a.pattern, a.maxsize)
    if not matches:
        print('no matches', file=2)
        sys.exit(1)
    if a.test:
        from collist import collist
        print(collist(matches))
        return
    else:
        sp.run(['rsync', '--progress', '-h',
                a.server+":{%s}"%','.join(matches), '.']
                +(['--remove-source-files'] if a.remove else []), check=True)


if __name__ == '__main__':
    main()
