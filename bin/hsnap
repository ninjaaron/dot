#!/data/data/com.termux/files/usr/bin/env python3

import os
import subprocess as sp
import yaml
from time import strftime


def MakeSnap(home, snap_dir='.snapdir'):
    os.chdir('%s/%s' % (home, snap_dir))
    time = strftime('%F.%T')
    btrfssnap(home, 'new/%s' % time)

    hours = [x.split(':')[0] for x in os.listdir('hour')]
    if strftime('%F.%H') not in hours:
        btrfssnap(home, 'hour/%s' % time)
    days = [x.split('.')[0] for x in os.listdir('day')]
    if strftime('%F') not in days:
        btrfssnap(home, 'day/%s' % time)


def btrfssnap(home, target):
    sp.run(['btrfs', 'subvolume', 'snapshot', home, target])


def Cleanup(home, snap_dir='.snapdir', new_limit=9, hour_limit=9, day_limit=5):
    os.chdir('%s/%s' % (home, snap_dir))
    for i in ['new', new_limit], ['hour', hour_limit], ['day', day_limit]:
        DelExtra(i[0], i[1])


def DelExtra(folder, limit):
    snapshots = os.listdir(folder)
    overage = len(snapshots) - limit
    if overage > 0:
        for extra in range(overage):
            snap = '%s/%s' % (folder, snapshots[extra])
            sp.run(['btrfs', 'subvolume', 'delete', snap])


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-n', '--new', help='create new snapshot',
                       action='store_true')
    group.add_argument('-c', '--cleanup', metavar='<USER>',
                       help='cleanup directory of specified <USER>')
    args = parser.parse_args()

    if args.cleanup:
        home = '/home/%s' % args.cleanup
        if os.path.isfile('%s/.hsnaprc' % home):
            cfg = yaml.load(open('%s/.hsnaprc' % home))
            Cleanup(home, cfg['snap_dir'], cfg['new_limit'],
                    cfg['hour_limit'], cfg['day_limit'])
        else:
            Cleanup(home)
    elif args.new:
        home = os.environ['HOME']
        if os.path.isfile('%s/.hsnaprc' % home):
            cfg = yaml.load(open('%s/.hsnaprc' % home))
            MakeSnap(home, cfg['snap_dir'])
        else:
            MakeSnap(home)
